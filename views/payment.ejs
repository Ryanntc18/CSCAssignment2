<!DOCTYPE html>
<html lang="en">
    <%- include('./partials/head.ejs') %>
    <script src="https://polyfill.io/v3/polyfill.min.js?version=3.52.1&features=fetch"></script>
<body>   
    <div class="container-fluid">

        <div class="row">
            <div class="col-12 text-left">
                <h1>Subscribe</h1>
                <%- include('./partials/nav.ejs') %>
            </div>
        </div>

        <div class="row">
            <div class="col">
                <h5>Name: admin</h5>
                <h5>Subscribtion: Talents daily Subscribtion, SGD$10/day</h5>
            </div>
        </div>

        <div class="row" style="padding-top: 20px;">
            <div class="col-4">
                <div class="spinner-border" role="status" style="display: none;" id="loading">
                    <span class="sr-only">Loading...</span>
                  </div>
                <form id="payment-form">
                    <div id="card-element"><!--Stripe.js injects the Card Element--></div>
                    <br>
                    <button id="submit" class="btn btn-primary">
                      <div class="spinner" id="spinner"></div>
                      <span id="button-text">Pay</span>
                    </button>
                    <p id="card-error" role="alert"></p>
                    <p class="result-message" hidden>
                      Payment succeeded, see the result in your
                      
                    </p>
                    <div
                      id="card-element-errors"
                      class="text-gray-700 text-base mt-2"
                      role="alert"
                    ></div>
                  </form>
            </div>
        </div>
    </div>
    
</body>

<script>
   // A reference to Stripe.js initialized with your real test publishable API key.
    var stripe = Stripe("pk_test_51I5B7mLaXDcHpE2BfPtIZe7Pd8Z2m80hivBktXXcfqGdB2tOBfRrScaU96gibvijmmbo8FFLFtKGsBP8FH7Xf9MU00gYYJnwn3");
    // The items the customer wants to buy
    var purchase = {
    items: [{ id: "subscribtion" }]
    };

    stripeElements(stripe);

    // Create credit card styles
    function stripeElements(publishableKey) {

    if (document.getElementById('card-element')) {
        let elements = stripe.elements();

        card = elements.create('card');

        card.mount('#card-element');

        card.on('focus', function () {
        let el = document.getElementById('card-element-errors');
        el.classList.add('focused');
        });

        card.on('blur', function () {
        let el = document.getElementById('card-element-errors');
        el.classList.remove('focused');
        });

        card.on('change', function (event) {
        displayError(event);
        });
    }

    let paymentForm = document.getElementById('payment-form');
    if (paymentForm) {
        paymentForm.addEventListener('submit', function (evt) {
        evt.preventDefault();
        var x = document.getElementById("payment-form");
        x.style.display = "none";

        var load = document.getElementById("loading");
        load.style.display = "block";
        // If a previous payment was attempted, get the lastest invoice
        const latestInvoicePaymentIntentStatus = localStorage.getItem(
            'latestInvoicePaymentIntentStatus'
        );

        if (latestInvoicePaymentIntentStatus === 'requires_payment_method') {
            const invoiceId = "None";
            const isPaymentRetry = true;
            // create new payment method & retry payment on invoice with new payment method
            createPaymentMethod({
            card,
            isPaymentRetry,
            invoiceId,
            });
        } else {
            // create new payment method & create subscription
            createPaymentMethod({ card });
        }
        });
    }
    }

    // Display any error if any
    function displayError(event) {
        let displayError = document.getElementById('card-element-errors');
        if (event.error) {
            displayError.textContent = event.error.message;
        } else {
            displayError.textContent = '';
        }
    }

    // set payment details, eg customer id
    function createPaymentMethod({ card, isPaymentRetry, invoiceId }) {
    const customerId = "cus_IrnmHXRxc4F5IP"
    // Set up payment method for recurring usage
    let billingName = "admin";

    let priceId = "price_1IFiirLaXDcHpE2BvXo7qCaw";

    stripe
        .createPaymentMethod({
        type: 'card',
        card: card,
        billing_details: {
            name: billingName,
        },
        })
        .then((result) => {
        if (result.error) {
            displayError(result);
        } else {
            if (isPaymentRetry) {
            // Update the payment method and retry invoice payment
            retryInvoiceWithNewPaymentMethod({
                customerId: customerId,
                paymentMethodId: result.paymentMethod.id,
                invoiceId: invoiceId,
                priceId: priceId,
            });
            } else {
           
            // Create the subscription
            console.log(result.paymentMethod.id);
            createSubscription({
                customerId: customerId,
                paymentMethodId: result.paymentMethod.id,
                priceId: priceId,
            });
            }
        }
        });
    };

    // Creates the subscribtion with a post event
    function createSubscription({ customerId, paymentMethodId, priceId }) {
        
        return (
            fetch('/create-subscription', {
            method: 'post',
            headers: {
                'Content-type': 'application/json',
            },
            body: JSON.stringify({
                customerId: customerId,
                paymentMethodId: paymentMethodId,
                priceId: priceId,
            }),
            })
            .then((response) => {
                return response.json();
            })
            // If the card is declined, display an error to the user.
            .then((result) => {
                if (result.error) {
                // The card had an error when trying to attach it to a customer
                throw result;
                }
                return result;
            })
            // Normalize the result to contain the object returned
            // by Stripe. Add the addional details we need.
            .then((result) => {
                return {
                // Use the Stripe 'object' property on the
                // returned result to understand what object is returned.
                subscription: result,
                paymentMethodId: paymentMethodId,
                priceId: priceId,
                };
            })
            // No more actions required. Provision your service for the user.
            .then(onSubscriptionComplete)
            .catch((error) => {
                // An error has happened. Display the failure to the user here.
                // We utilize the HTML element we created.
                displayError(error);
            })
        );     
    }

    // Runs when subscribtion is a sucess
    function onSubscriptionComplete(result) {
        console.log(result);
        alert("Sucessfully Subscribed to Talents");
        window.location.replace("/dashboard");
        // Payment was successful. Provision access to your service.
        // Remove invoice from localstorage because payment is now complete.
        clearCache();
        // Change your UI to show a success message to your customer.
    }


</script>

</html>